<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".Generated.empty" #>
<#
var mqsdk = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "..", "mqsdk");

if (Directory.Exists(mqsdk))
{
	var output = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), "..", "Metasequoia.Sharp", Path.GetFileNameWithoutExtension(Host.TemplateFile) + ".Generated.cs");
	var lines = File.ReadLines(Path.Combine(mqsdk, "MQInit.cpp"), Encoding.GetEncoding(932));
	var defs = ParseDefinitions(lines).ToArray();
#>
using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Text;

namespace Metasequoia
{
	using MQFileDialogInfo = FileDialogInfo;
	using MQSendMessageInfo = SendMessageInfo;
	using MQPoint = Point;
	using MQUserDataInfo = UserDataInfo;
	using MQCoordinate = Coordinate;
	using MQColor = Color;
	using HWND = IntPtr;
	using BOOL = Boolean;
	using UINT = UInt32;
	using DWORD = UInt32;
	
	partial class NativeMethods
	{
<#	foreach (var i in defs) { #>
		[SuppressUnmanagedCodeSecurity, DllImport(<#=i.GetDllImportArgs() #>)]
		public static extern <#=i.GetManagedType() #> <#=i.Name #>(<#=i.GetParameters() #>);
<#	} #>
	}
}
<#
	File.WriteAllText(output, GenerationEnvironment.ToString());
	GenerationEnvironment.Clear();
}
#>
<#+
IEnumerable<MethodDefinition> ParseDefinitions(IEnumerable<string> lines)
{
	var methodRegex = new Regex(@"(?<type>.+?)\s+?\(.+? \*(?<name>.+?)\)\((?<args>.+?)\);", RegexOptions.Compiled);
	
	foreach (var line in lines)
	{
		if (!line.EndsWith(";") || 
			char.IsWhiteSpace(line, 0))
			continue;

		var match = methodRegex.Match(line);

		if (!match.Success)
			continue;

		var type = match.Groups["type"].Value;
		var name = match.Groups["name"].Value;
		var args = match.Groups["args"].Value == "void"
			? new ParameterDefinition[0]
			: match.Groups["args"].Value.Split(',').Select(i =>
			{
				var isPointer = i.Contains("*");
				var delimiterIdx = isPointer ? i.LastIndexOf('*') + 1 : i.LastIndexOf(' ');
				var argType = i.Substring(0, delimiterIdx).Trim();
				var argName = i.Substring(delimiterIdx).Trim();

				return new ParameterDefinition(argName, argType);
			}).ToArray();

		yield return new MethodDefinition(name, type, args);
	}
}

class MethodDefinition
{
	public string Name { get; }
	public string Type { get; }
	public ParameterDefinition[] Parameters { get; }

	public MethodDefinition(string name, string type, ParameterDefinition[] parameters)
	{
		Name = name;
		Type = type;
		Parameters = parameters;
	}

	public string GetDllImportArgs() =>
		"\"Metaseq.exe\"" + (Parameters.Any(i => i.ToString(this).Contains("UnmanagedType.LPStr")) ? ", CharSet = CharSet.Ansi, BestFitMapping = false, ThrowOnUnmappableChar = true" : null);

	public string GetManagedType() =>
		ParameterDefinition.GetManagedType(Type, this, "");

	public string GetParameters() =>
		string.Join(", ", Parameters.Select(i => i.ToString(this)));
}

class ParameterDefinition
{
	public string Name { get; }
	public string Type { get; }

	public ParameterDefinition(string name, string type)
	{
		Name = name;
		Type = type;
	}

	public string ToString(MethodDefinition method)
	{
		return $"{GetManagedType(Type, method, Name)} {Name}";
	}

	public static string GetManagedType(string type, MethodDefinition method, string name)
	{
		switch (type)
		{
			case "MQDocument":
			case "MQMaterial":
			case "MQObject":
			case "MQScene":
			case "MQShaderNode":
			case "MQXmlDocument":
			case "MQXmlElement":
				return "IntPtr";
			case "const char *":
				return "[MarshalAs(UnmanagedType.LPStr)] string";
			case "const wchar_t *":
				return "[MarshalAs(UnmanagedType.LPWStr)] string";
			case "char *":
				return "[MarshalAs(UnmanagedType.LPStr)] StringBuilder";
			case "wchar_t *":
				return "[MarshalAs(UnmanagedType.LPWStr)] StringBuilder";
			case "int *":
				return "int[]";
			case "const float *" when name == "matrix":
				return "ref Matrix";
			case "float *" when name == "matrix":
				return "out Matrix";
			case "const float *":
			case "float *":
				return "float[]";
			case "LPVOID *":
				return "out IntPtr";
			case "BOOL *":
				return "bool[]";
			case "void **":
			case "void *" when name == "values":
				return "IntPtr[]";
			case "const void *":
			case "void *" when method.Name.EndsWith("UserData"):
				return "byte[]";
			case "void *":
				return "IntPtr";
			case "MQCoordinate *":
				return "MQCoordinate[]";
			case "MQPoint *" when method.Name == "MQ_ImportAxis" || method.Name == "MQ_ExportAxis" || name == "ptsarray":
				return "MQPoint[]";
			case "MQPoint *" when method.Name == "MQObj_GetVertex":
				return "out MQPoint";
			case "const MQPoint *":
				return "MQPoint[]";
			case "MQBool":
				return "[MarshalAs(UnmanagedType.I1)] bool";
			case "MQBool *":
				return "[MarshalAs(UnmanagedType.LPArray, ArraySubType = UnmanagedType.I1)] bool[]";
			case "int" when name == "type_id" && method.Name.StartsWith("MQObj_"):
				return "MQObjId";
			case "int" when name == "type_id" && method.Name.StartsWith("MQMat_"):
				return "MQMatId";
			case "int" when name == "type_id" && method.Name.StartsWith("MQScene_"):
				return "MQScene";
			case "int" when name == "type_id" && method.Name.StartsWith("MQXmlDoc_"):
				return "MQXmldoc";
			case "int" when name == "type_id" && method.Name.StartsWith("MQXmlElem_"):
				return "MQXmlelem";
			default:
				return type.EndsWith("*")
					? "ref " + type.TrimEnd('*')
					: type;
		}
	}
}
#>
